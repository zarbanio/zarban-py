# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@zarban.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class ProfileResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'referral': 'Referral',
        'points': 'int',
        'user': 'User',
        'bank_info': 'list[BankInfo]'
    }

    attribute_map = {
        'referral': 'referral',
        'points': 'points',
        'user': 'user',
        'bank_info': 'bankInfo'
    }

    def __init__(self, referral=None, points=None, user=None, bank_info=None, local_vars_configuration=None):  # noqa: E501
        """ProfileResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._referral = None
        self._points = None
        self._user = None
        self._bank_info = None
        self.discriminator = None

        self.referral = referral
        self.points = points
        self.user = user
        self.bank_info = bank_info

    @property
    def referral(self):
        """Gets the referral of this ProfileResponse.  # noqa: E501


        :return: The referral of this ProfileResponse.  # noqa: E501
        :rtype: Referral
        """
        return self._referral

    @referral.setter
    def referral(self, referral):
        """Sets the referral of this ProfileResponse.


        :param referral: The referral of this ProfileResponse.  # noqa: E501
        :type: Referral
        """
        if self.local_vars_configuration.client_side_validation and referral is None:  # noqa: E501
            raise ValueError("Invalid value for `referral`, must not be `None`")  # noqa: E501

        self._referral = referral

    @property
    def points(self):
        """Gets the points of this ProfileResponse.  # noqa: E501


        :return: The points of this ProfileResponse.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this ProfileResponse.


        :param points: The points of this ProfileResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and points is None:  # noqa: E501
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points

    @property
    def user(self):
        """Gets the user of this ProfileResponse.  # noqa: E501


        :return: The user of this ProfileResponse.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ProfileResponse.


        :param user: The user of this ProfileResponse.  # noqa: E501
        :type: User
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def bank_info(self):
        """Gets the bank_info of this ProfileResponse.  # noqa: E501


        :return: The bank_info of this ProfileResponse.  # noqa: E501
        :rtype: list[BankInfo]
        """
        return self._bank_info

    @bank_info.setter
    def bank_info(self, bank_info):
        """Sets the bank_info of this ProfileResponse.


        :param bank_info: The bank_info of this ProfileResponse.  # noqa: E501
        :type: list[BankInfo]
        """
        if self.local_vars_configuration.client_side_validation and bank_info is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_info`, must not be `None`")  # noqa: E501

        self._bank_info = bank_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProfileResponse):
            return True

        return self.to_dict() != other.to_dict()

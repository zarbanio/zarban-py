# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class RedemptionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'str',
        'destination_card_number': 'str',
        'sms_otp': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'destination_card_number': 'destinationCardNumber',
        'sms_otp': 'SmsOtp'
    }

    def __init__(self, amount=None, destination_card_number=None, sms_otp=None, local_vars_configuration=None):  # noqa: E501
        """RedemptionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._destination_card_number = None
        self._sms_otp = None
        self.discriminator = None

        self.amount = amount
        self.destination_card_number = destination_card_number
        self.sms_otp = sms_otp

    @property
    def amount(self):
        """Gets the amount of this RedemptionRequest.  # noqa: E501

        The amount to be redeemed in ZAR  # noqa: E501

        :return: The amount of this RedemptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RedemptionRequest.

        The amount to be redeemed in ZAR  # noqa: E501

        :param amount: The amount of this RedemptionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def destination_card_number(self):
        """Gets the destination_card_number of this RedemptionRequest.  # noqa: E501

        The card number to which the redemption amount will be transferred  # noqa: E501

        :return: The destination_card_number of this RedemptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination_card_number

    @destination_card_number.setter
    def destination_card_number(self, destination_card_number):
        """Sets the destination_card_number of this RedemptionRequest.

        The card number to which the redemption amount will be transferred  # noqa: E501

        :param destination_card_number: The destination_card_number of this RedemptionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and destination_card_number is None:  # noqa: E501
            raise ValueError("Invalid value for `destination_card_number`, must not be `None`")  # noqa: E501

        self._destination_card_number = destination_card_number

    @property
    def sms_otp(self):
        """Gets the sms_otp of this RedemptionRequest.  # noqa: E501

        The SMS OTP code  # noqa: E501

        :return: The sms_otp of this RedemptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._sms_otp

    @sms_otp.setter
    def sms_otp(self, sms_otp):
        """Sets the sms_otp of this RedemptionRequest.

        The SMS OTP code  # noqa: E501

        :param sms_otp: The sms_otp of this RedemptionRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and sms_otp is None:  # noqa: E501
            raise ValueError("Invalid value for `sms_otp`, must not be `None`")  # noqa: E501

        self._sms_otp = sms_otp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedemptionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedemptionRequest):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@zarban.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class KycResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'national_id': 'str',
        'date_of_birth': 'str',
        'bank_info': 'BankInfo'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'national_id': 'nationalId',
        'date_of_birth': 'dateOfBirth',
        'bank_info': 'bankInfo'
    }

    def __init__(self, id=None, first_name=None, last_name=None, national_id=None, date_of_birth=None, bank_info=None, local_vars_configuration=None):  # noqa: E501
        """KycResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._first_name = None
        self._last_name = None
        self._national_id = None
        self._date_of_birth = None
        self._bank_info = None
        self.discriminator = None

        self.id = id
        self.first_name = first_name
        self.last_name = last_name
        self.national_id = national_id
        self.date_of_birth = date_of_birth
        self.bank_info = bank_info

    @property
    def id(self):
        """Gets the id of this KycResponse.  # noqa: E501

        KYC request ID  # noqa: E501

        :return: The id of this KycResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KycResponse.

        KYC request ID  # noqa: E501

        :param id: The id of this KycResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this KycResponse.  # noqa: E501

        First name  # noqa: E501

        :return: The first_name of this KycResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this KycResponse.

        First name  # noqa: E501

        :param first_name: The first_name of this KycResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this KycResponse.  # noqa: E501

        Last name  # noqa: E501

        :return: The last_name of this KycResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this KycResponse.

        Last name  # noqa: E501

        :param last_name: The last_name of this KycResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def national_id(self):
        """Gets the national_id of this KycResponse.  # noqa: E501

        National code  # noqa: E501

        :return: The national_id of this KycResponse.  # noqa: E501
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """Sets the national_id of this KycResponse.

        National code  # noqa: E501

        :param national_id: The national_id of this KycResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and national_id is None:  # noqa: E501
            raise ValueError("Invalid value for `national_id`, must not be `None`")  # noqa: E501

        self._national_id = national_id

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this KycResponse.  # noqa: E501

        Date of birth  # noqa: E501

        :return: The date_of_birth of this KycResponse.  # noqa: E501
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this KycResponse.

        Date of birth  # noqa: E501

        :param date_of_birth: The date_of_birth of this KycResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and date_of_birth is None:  # noqa: E501
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    @property
    def bank_info(self):
        """Gets the bank_info of this KycResponse.  # noqa: E501


        :return: The bank_info of this KycResponse.  # noqa: E501
        :rtype: BankInfo
        """
        return self._bank_info

    @bank_info.setter
    def bank_info(self, bank_info):
        """Sets the bank_info of this KycResponse.


        :param bank_info: The bank_info of this KycResponse.  # noqa: E501
        :type: BankInfo
        """
        if self.local_vars_configuration.client_side_validation and bank_info is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_info`, must not be `None`")  # noqa: E501

        self._bank_info = bank_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KycResponse):
            return True

        return self.to_dict() != other.to_dict()

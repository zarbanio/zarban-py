# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class Loan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'user_id': 'int',
        'liquidation_price': 'dict(str, str)',
        'collateral': 'dict(str, str)',
        'collateralization_ratio': 'str',
        'loan_to_value': 'str',
        'debt': 'dict(str, str)',
        'plan': 'LoanPlan'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'liquidation_price': 'liquidationPrice',
        'collateral': 'collateral',
        'collateralization_ratio': 'collateralizationRatio',
        'loan_to_value': 'loanToValue',
        'debt': 'debt',
        'plan': 'plan'
    }

    def __init__(self, id=None, user_id=None, liquidation_price=None, collateral=None, collateralization_ratio=None, loan_to_value=None, debt=None, plan=None, local_vars_configuration=None):  # noqa: E501
        """Loan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._liquidation_price = None
        self._collateral = None
        self._collateralization_ratio = None
        self._loan_to_value = None
        self._debt = None
        self._plan = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.user_id = user_id
        self.liquidation_price = liquidation_price
        self.collateral = collateral
        self.collateralization_ratio = collateralization_ratio
        self.loan_to_value = loan_to_value
        self.debt = debt
        self.plan = plan

    @property
    def id(self):
        """Gets the id of this Loan.  # noqa: E501

        Identifier for the vault.  # noqa: E501

        :return: The id of this Loan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Loan.

        Identifier for the vault.  # noqa: E501

        :param id: The id of this Loan.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Loan.  # noqa: E501

        Identifier for the user.  # noqa: E501

        :return: The user_id of this Loan.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Loan.

        Identifier for the user.  # noqa: E501

        :param user_id: The user_id of this Loan.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def liquidation_price(self):
        """Gets the liquidation_price of this Loan.  # noqa: E501


        :return: The liquidation_price of this Loan.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._liquidation_price

    @liquidation_price.setter
    def liquidation_price(self, liquidation_price):
        """Sets the liquidation_price of this Loan.


        :param liquidation_price: The liquidation_price of this Loan.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and liquidation_price is None:  # noqa: E501
            raise ValueError("Invalid value for `liquidation_price`, must not be `None`")  # noqa: E501

        self._liquidation_price = liquidation_price

    @property
    def collateral(self):
        """Gets the collateral of this Loan.  # noqa: E501


        :return: The collateral of this Loan.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._collateral

    @collateral.setter
    def collateral(self, collateral):
        """Sets the collateral of this Loan.


        :param collateral: The collateral of this Loan.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and collateral is None:  # noqa: E501
            raise ValueError("Invalid value for `collateral`, must not be `None`")  # noqa: E501

        self._collateral = collateral

    @property
    def collateralization_ratio(self):
        """Gets the collateralization_ratio of this Loan.  # noqa: E501

        The collateralization ratio of the vault.  # noqa: E501

        :return: The collateralization_ratio of this Loan.  # noqa: E501
        :rtype: str
        """
        return self._collateralization_ratio

    @collateralization_ratio.setter
    def collateralization_ratio(self, collateralization_ratio):
        """Sets the collateralization_ratio of this Loan.

        The collateralization ratio of the vault.  # noqa: E501

        :param collateralization_ratio: The collateralization_ratio of this Loan.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and collateralization_ratio is None:  # noqa: E501
            raise ValueError("Invalid value for `collateralization_ratio`, must not be `None`")  # noqa: E501

        self._collateralization_ratio = collateralization_ratio

    @property
    def loan_to_value(self):
        """Gets the loan_to_value of this Loan.  # noqa: E501

        The loan to value of the vault.  # noqa: E501

        :return: The loan_to_value of this Loan.  # noqa: E501
        :rtype: str
        """
        return self._loan_to_value

    @loan_to_value.setter
    def loan_to_value(self, loan_to_value):
        """Sets the loan_to_value of this Loan.

        The loan to value of the vault.  # noqa: E501

        :param loan_to_value: The loan_to_value of this Loan.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and loan_to_value is None:  # noqa: E501
            raise ValueError("Invalid value for `loan_to_value`, must not be `None`")  # noqa: E501

        self._loan_to_value = loan_to_value

    @property
    def debt(self):
        """Gets the debt of this Loan.  # noqa: E501


        :return: The debt of this Loan.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._debt

    @debt.setter
    def debt(self, debt):
        """Sets the debt of this Loan.


        :param debt: The debt of this Loan.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and debt is None:  # noqa: E501
            raise ValueError("Invalid value for `debt`, must not be `None`")  # noqa: E501

        self._debt = debt

    @property
    def plan(self):
        """Gets the plan of this Loan.  # noqa: E501


        :return: The plan of this Loan.  # noqa: E501
        :rtype: LoanPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Loan.


        :param plan: The plan of this Loan.  # noqa: E501
        :type: LoanPlan
        """
        if self.local_vars_configuration.client_side_validation and plan is None:  # noqa: E501
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Loan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Loan):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@zarban.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class Redemption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'Currency',
        'destination_bank_info': 'BankInfo',
        'status': 'dict(str, str)',
        'id': 'str',
        'created_at': 'Timestamp',
        'updated_at': 'Timestamp',
        'paya_tracking_code': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'destination_bank_info': 'destinationBankInfo',
        'status': 'status',
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'paya_tracking_code': 'payaTrackingCode'
    }

    def __init__(self, amount=None, destination_bank_info=None, status=None, id=None, created_at=None, updated_at=None, paya_tracking_code=None, local_vars_configuration=None):  # noqa: E501
        """Redemption - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._destination_bank_info = None
        self._status = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._paya_tracking_code = None
        self.discriminator = None

        self.amount = amount
        self.destination_bank_info = destination_bank_info
        self.status = status
        self.id = id
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if paya_tracking_code is not None:
            self.paya_tracking_code = paya_tracking_code

    @property
    def amount(self):
        """Gets the amount of this Redemption.  # noqa: E501


        :return: The amount of this Redemption.  # noqa: E501
        :rtype: Currency
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Redemption.


        :param amount: The amount of this Redemption.  # noqa: E501
        :type: Currency
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def destination_bank_info(self):
        """Gets the destination_bank_info of this Redemption.  # noqa: E501


        :return: The destination_bank_info of this Redemption.  # noqa: E501
        :rtype: BankInfo
        """
        return self._destination_bank_info

    @destination_bank_info.setter
    def destination_bank_info(self, destination_bank_info):
        """Sets the destination_bank_info of this Redemption.


        :param destination_bank_info: The destination_bank_info of this Redemption.  # noqa: E501
        :type: BankInfo
        """
        if self.local_vars_configuration.client_side_validation and destination_bank_info is None:  # noqa: E501
            raise ValueError("Invalid value for `destination_bank_info`, must not be `None`")  # noqa: E501

        self._destination_bank_info = destination_bank_info

    @property
    def status(self):
        """Gets the status of this Redemption.  # noqa: E501


        :return: The status of this Redemption.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Redemption.


        :param status: The status of this Redemption.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def id(self):
        """Gets the id of this Redemption.  # noqa: E501

        The ID of the redemption request  # noqa: E501

        :return: The id of this Redemption.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Redemption.

        The ID of the redemption request  # noqa: E501

        :param id: The id of this Redemption.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Redemption.  # noqa: E501


        :return: The created_at of this Redemption.  # noqa: E501
        :rtype: Timestamp
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Redemption.


        :param created_at: The created_at of this Redemption.  # noqa: E501
        :type: Timestamp
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Redemption.  # noqa: E501


        :return: The updated_at of this Redemption.  # noqa: E501
        :rtype: Timestamp
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Redemption.


        :param updated_at: The updated_at of this Redemption.  # noqa: E501
        :type: Timestamp
        """

        self._updated_at = updated_at

    @property
    def paya_tracking_code(self):
        """Gets the paya_tracking_code of this Redemption.  # noqa: E501

        The Paya tracking code  # noqa: E501

        :return: The paya_tracking_code of this Redemption.  # noqa: E501
        :rtype: str
        """
        return self._paya_tracking_code

    @paya_tracking_code.setter
    def paya_tracking_code(self, paya_tracking_code):
        """Sets the paya_tracking_code of this Redemption.

        The Paya tracking code  # noqa: E501

        :param paya_tracking_code: The paya_tracking_code of this Redemption.  # noqa: E501
        :type: str
        """

        self._paya_tracking_code = paya_tracking_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Redemption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Redemption):
            return True

        return self.to_dict() != other.to_dict()

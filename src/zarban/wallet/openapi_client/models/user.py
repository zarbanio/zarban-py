# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@zarban.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'username': 'str',
        'phone': 'str',
        'is_email_verified': 'bool',
        'is_phone_verified': 'bool',
        'is_kyc_verified': 'bool',
        'is_child': 'bool',
        'is_super_user': 'bool',
        'is_admin': 'bool',
        'telegram': 'TelegramProfile'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'username': 'username',
        'phone': 'phone',
        'is_email_verified': 'isEmailVerified',
        'is_phone_verified': 'isPhoneVerified',
        'is_kyc_verified': 'isKycVerified',
        'is_child': 'isChild',
        'is_super_user': 'isSuperUser',
        'is_admin': 'isAdmin',
        'telegram': 'telegram'
    }

    def __init__(self, first_name=None, last_name=None, email=None, username=None, phone=None, is_email_verified=None, is_phone_verified=None, is_kyc_verified=None, is_child=None, is_super_user=None, is_admin=None, telegram=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._last_name = None
        self._email = None
        self._username = None
        self._phone = None
        self._is_email_verified = None
        self._is_phone_verified = None
        self._is_kyc_verified = None
        self._is_child = None
        self._is_super_user = None
        self._is_admin = None
        self._telegram = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if username is not None:
            self.username = username
        if phone is not None:
            self.phone = phone
        if is_email_verified is not None:
            self.is_email_verified = is_email_verified
        if is_phone_verified is not None:
            self.is_phone_verified = is_phone_verified
        if is_kyc_verified is not None:
            self.is_kyc_verified = is_kyc_verified
        if is_child is not None:
            self.is_child = is_child
        if is_super_user is not None:
            self.is_super_user = is_super_user
        if is_admin is not None:
            self.is_admin = is_admin
        if telegram is not None:
            self.telegram = telegram

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        User's first name  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        User's first name  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        User's last name  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        User's last name  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501


        :return: The phone of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.


        :param phone: The phone of this User.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def is_email_verified(self):
        """Gets the is_email_verified of this User.  # noqa: E501


        :return: The is_email_verified of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_verified

    @is_email_verified.setter
    def is_email_verified(self, is_email_verified):
        """Sets the is_email_verified of this User.


        :param is_email_verified: The is_email_verified of this User.  # noqa: E501
        :type: bool
        """

        self._is_email_verified = is_email_verified

    @property
    def is_phone_verified(self):
        """Gets the is_phone_verified of this User.  # noqa: E501


        :return: The is_phone_verified of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_phone_verified

    @is_phone_verified.setter
    def is_phone_verified(self, is_phone_verified):
        """Sets the is_phone_verified of this User.


        :param is_phone_verified: The is_phone_verified of this User.  # noqa: E501
        :type: bool
        """

        self._is_phone_verified = is_phone_verified

    @property
    def is_kyc_verified(self):
        """Gets the is_kyc_verified of this User.  # noqa: E501


        :return: The is_kyc_verified of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_kyc_verified

    @is_kyc_verified.setter
    def is_kyc_verified(self, is_kyc_verified):
        """Sets the is_kyc_verified of this User.


        :param is_kyc_verified: The is_kyc_verified of this User.  # noqa: E501
        :type: bool
        """

        self._is_kyc_verified = is_kyc_verified

    @property
    def is_child(self):
        """Gets the is_child of this User.  # noqa: E501


        :return: The is_child of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_child

    @is_child.setter
    def is_child(self, is_child):
        """Sets the is_child of this User.


        :param is_child: The is_child of this User.  # noqa: E501
        :type: bool
        """

        self._is_child = is_child

    @property
    def is_super_user(self):
        """Gets the is_super_user of this User.  # noqa: E501


        :return: The is_super_user of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_super_user

    @is_super_user.setter
    def is_super_user(self, is_super_user):
        """Sets the is_super_user of this User.


        :param is_super_user: The is_super_user of this User.  # noqa: E501
        :type: bool
        """

        self._is_super_user = is_super_user

    @property
    def is_admin(self):
        """Gets the is_admin of this User.  # noqa: E501


        :return: The is_admin of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this User.


        :param is_admin: The is_admin of this User.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def telegram(self):
        """Gets the telegram of this User.  # noqa: E501


        :return: The telegram of this User.  # noqa: E501
        :rtype: TelegramProfile
        """
        return self._telegram

    @telegram.setter
    def telegram(self, telegram):
        """Sets the telegram of this User.


        :param telegram: The telegram of this User.  # noqa: E501
        :type: TelegramProfile
        """

        self._telegram = telegram

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban Wallet API

    API for Zarban wallet services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.wallet.openapi_client.configuration import Configuration


class Balance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'locked': 'dict(str, str)',
        'coin': 'Coin',
        'balance': 'dict(str, str)'
    }

    attribute_map = {
        'locked': 'locked',
        'coin': 'coin',
        'balance': 'balance'
    }

    def __init__(self, locked=None, coin=None, balance=None, local_vars_configuration=None):  # noqa: E501
        """Balance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._locked = None
        self._coin = None
        self._balance = None
        self.discriminator = None

        self.locked = locked
        self.coin = coin
        self.balance = balance

    @property
    def locked(self):
        """Gets the locked of this Balance.  # noqa: E501


        :return: The locked of this Balance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Balance.


        :param locked: The locked of this Balance.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and locked is None:  # noqa: E501
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    @property
    def coin(self):
        """Gets the coin of this Balance.  # noqa: E501


        :return: The coin of this Balance.  # noqa: E501
        :rtype: Coin
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this Balance.


        :param coin: The coin of this Balance.  # noqa: E501
        :type: Coin
        """
        if self.local_vars_configuration.client_side_validation and coin is None:  # noqa: E501
            raise ValueError("Invalid value for `coin`, must not be `None`")  # noqa: E501

        self._coin = coin

    @property
    def balance(self):
        """Gets the balance of this Balance.  # noqa: E501


        :return: The balance of this Balance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Balance.


        :param balance: The balance of this Balance.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and balance is None:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Balance):
            return True

        return self.to_dict() != other.to_dict()

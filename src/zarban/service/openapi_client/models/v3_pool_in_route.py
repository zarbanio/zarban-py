# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class V3PoolInRoute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'token_in': 'Token',
        'token_out': 'Token',
        'fee': 'str'
    }

    attribute_map = {
        'address': 'address',
        'token_in': 'tokenIn',
        'token_out': 'tokenOut',
        'fee': 'fee'
    }

    def __init__(self, address=None, token_in=None, token_out=None, fee=None, local_vars_configuration=None):  # noqa: E501
        """V3PoolInRoute - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._token_in = None
        self._token_out = None
        self._fee = None
        self.discriminator = None

        self.address = address
        self.token_in = token_in
        self.token_out = token_out
        self.fee = fee

    @property
    def address(self):
        """Gets the address of this V3PoolInRoute.  # noqa: E501


        :return: The address of this V3PoolInRoute.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this V3PoolInRoute.


        :param address: The address of this V3PoolInRoute.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address is not None and not re.search(r'^(0x)?[0-9a-fA-F]{40}$', address)):  # noqa: E501
            raise ValueError(r"Invalid value for `address`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501

        self._address = address

    @property
    def token_in(self):
        """Gets the token_in of this V3PoolInRoute.  # noqa: E501


        :return: The token_in of this V3PoolInRoute.  # noqa: E501
        :rtype: Token
        """
        return self._token_in

    @token_in.setter
    def token_in(self, token_in):
        """Sets the token_in of this V3PoolInRoute.


        :param token_in: The token_in of this V3PoolInRoute.  # noqa: E501
        :type: Token
        """
        if self.local_vars_configuration.client_side_validation and token_in is None:  # noqa: E501
            raise ValueError("Invalid value for `token_in`, must not be `None`")  # noqa: E501

        self._token_in = token_in

    @property
    def token_out(self):
        """Gets the token_out of this V3PoolInRoute.  # noqa: E501


        :return: The token_out of this V3PoolInRoute.  # noqa: E501
        :rtype: Token
        """
        return self._token_out

    @token_out.setter
    def token_out(self, token_out):
        """Sets the token_out of this V3PoolInRoute.


        :param token_out: The token_out of this V3PoolInRoute.  # noqa: E501
        :type: Token
        """
        if self.local_vars_configuration.client_side_validation and token_out is None:  # noqa: E501
            raise ValueError("Invalid value for `token_out`, must not be `None`")  # noqa: E501

        self._token_out = token_out

    @property
    def fee(self):
        """Gets the fee of this V3PoolInRoute.  # noqa: E501


        :return: The fee of this V3PoolInRoute.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this V3PoolInRoute.


        :param fee: The fee of this V3PoolInRoute.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and fee is None:  # noqa: E501
            raise ValueError("Invalid value for `fee`, must not be `None`")  # noqa: E501

        self._fee = fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3PoolInRoute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3PoolInRoute):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class Permission(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'timestamp': 'Timestamp',
        'where': 'Address',
        'who': 'Address',
        'action': 'str'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'where': 'where',
        'who': 'who',
        'action': 'action'
    }

    def __init__(self, id=None, timestamp=None, where=None, who=None, action=None, local_vars_configuration=None):  # noqa: E501
        """Permission - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._timestamp = None
        self._where = None
        self._who = None
        self._action = None
        self.discriminator = None

        self.id = id
        self.timestamp = timestamp
        self.where = where
        self.who = who
        self.action = action

    @property
    def id(self):
        """Gets the id of this Permission.  # noqa: E501


        :return: The id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Permission.


        :param id: The id of this Permission.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this Permission.  # noqa: E501


        :return: The timestamp of this Permission.  # noqa: E501
        :rtype: Timestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Permission.


        :param timestamp: The timestamp of this Permission.  # noqa: E501
        :type: Timestamp
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def where(self):
        """Gets the where of this Permission.  # noqa: E501


        :return: The where of this Permission.  # noqa: E501
        :rtype: Address
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this Permission.


        :param where: The where of this Permission.  # noqa: E501
        :type: Address
        """
        if self.local_vars_configuration.client_side_validation and where is None:  # noqa: E501
            raise ValueError("Invalid value for `where`, must not be `None`")  # noqa: E501

        self._where = where

    @property
    def who(self):
        """Gets the who of this Permission.  # noqa: E501


        :return: The who of this Permission.  # noqa: E501
        :rtype: Address
        """
        return self._who

    @who.setter
    def who(self, who):
        """Sets the who of this Permission.


        :param who: The who of this Permission.  # noqa: E501
        :type: Address
        """
        if self.local_vars_configuration.client_side_validation and who is None:  # noqa: E501
            raise ValueError("Invalid value for `who`, must not be `None`")  # noqa: E501

        self._who = who

    @property
    def action(self):
        """Gets the action of this Permission.  # noqa: E501


        :return: The action of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Permission.


        :param action: The action of this Permission.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["rely", "deny", "hope", "nope"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Permission):
            return True

        return self.to_dict() != other.to_dict()

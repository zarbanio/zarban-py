# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class AnswerUpdatedResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current': 'str',
        'round_id': 'str',
        'updated_at': 'str',
        'raw': 'Log'
    }

    attribute_map = {
        'current': 'current',
        'round_id': 'roundId',
        'updated_at': 'updatedAt',
        'raw': 'raw'
    }

    def __init__(self, current=None, round_id=None, updated_at=None, raw=None, local_vars_configuration=None):  # noqa: E501
        """AnswerUpdatedResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current = None
        self._round_id = None
        self._updated_at = None
        self._raw = None
        self.discriminator = None

        self.current = current
        self.round_id = round_id
        self.updated_at = updated_at
        self.raw = raw

    @property
    def current(self):
        """Gets the current of this AnswerUpdatedResponse.  # noqa: E501

        The current answer  # noqa: E501

        :return: The current of this AnswerUpdatedResponse.  # noqa: E501
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this AnswerUpdatedResponse.

        The current answer  # noqa: E501

        :param current: The current of this AnswerUpdatedResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and current is None:  # noqa: E501
            raise ValueError("Invalid value for `current`, must not be `None`")  # noqa: E501

        self._current = current

    @property
    def round_id(self):
        """Gets the round_id of this AnswerUpdatedResponse.  # noqa: E501

        The ID of the round  # noqa: E501

        :return: The round_id of this AnswerUpdatedResponse.  # noqa: E501
        :rtype: str
        """
        return self._round_id

    @round_id.setter
    def round_id(self, round_id):
        """Sets the round_id of this AnswerUpdatedResponse.

        The ID of the round  # noqa: E501

        :param round_id: The round_id of this AnswerUpdatedResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and round_id is None:  # noqa: E501
            raise ValueError("Invalid value for `round_id`, must not be `None`")  # noqa: E501

        self._round_id = round_id

    @property
    def updated_at(self):
        """Gets the updated_at of this AnswerUpdatedResponse.  # noqa: E501

        The time the answer was updated  # noqa: E501

        :return: The updated_at of this AnswerUpdatedResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AnswerUpdatedResponse.

        The time the answer was updated  # noqa: E501

        :param updated_at: The updated_at of this AnswerUpdatedResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def raw(self):
        """Gets the raw of this AnswerUpdatedResponse.  # noqa: E501


        :return: The raw of this AnswerUpdatedResponse.  # noqa: E501
        :rtype: Log
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this AnswerUpdatedResponse.


        :param raw: The raw of this AnswerUpdatedResponse.  # noqa: E501
        :type: Log
        """
        if self.local_vars_configuration.client_side_validation and raw is None:  # noqa: E501
            raise ValueError("Invalid value for `raw`, must not be `None`")  # noqa: E501

        self._raw = raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnswerUpdatedResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnswerUpdatedResponse):
            return True

        return self.to_dict() != other.to_dict()

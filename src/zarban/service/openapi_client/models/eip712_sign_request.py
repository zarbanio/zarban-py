# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class EIP712SignRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'typed_data': 'TypedData',
        'hash': 'str'
    }

    attribute_map = {
        'name': 'name',
        'typed_data': 'typedData',
        'hash': 'hash'
    }

    def __init__(self, name=None, typed_data=None, hash=None, local_vars_configuration=None):  # noqa: E501
        """EIP712SignRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._typed_data = None
        self._hash = None
        self.discriminator = None

        self.name = name
        self.typed_data = typed_data
        self.hash = hash

    @property
    def name(self):
        """Gets the name of this EIP712SignRequest.  # noqa: E501

        The name of the EIP712 signature  # noqa: E501

        :return: The name of this EIP712SignRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EIP712SignRequest.

        The name of the EIP712 signature  # noqa: E501

        :param name: The name of this EIP712SignRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def typed_data(self):
        """Gets the typed_data of this EIP712SignRequest.  # noqa: E501


        :return: The typed_data of this EIP712SignRequest.  # noqa: E501
        :rtype: TypedData
        """
        return self._typed_data

    @typed_data.setter
    def typed_data(self, typed_data):
        """Sets the typed_data of this EIP712SignRequest.


        :param typed_data: The typed_data of this EIP712SignRequest.  # noqa: E501
        :type: TypedData
        """
        if self.local_vars_configuration.client_side_validation and typed_data is None:  # noqa: E501
            raise ValueError("Invalid value for `typed_data`, must not be `None`")  # noqa: E501

        self._typed_data = typed_data

    @property
    def hash(self):
        """Gets the hash of this EIP712SignRequest.  # noqa: E501

        The hash of the EIP712 signature that needs to be signed  # noqa: E501

        :return: The hash of this EIP712SignRequest.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this EIP712SignRequest.

        The hash of the EIP712 signature that needs to be signed  # noqa: E501

        :param hash: The hash of this EIP712SignRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and hash is None:  # noqa: E501
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                hash is not None and not re.search(r'^(0x)?[0-9a-fA-F]{64}$', hash)):  # noqa: E501
            raise ValueError(r"Invalid value for `hash`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EIP712SignRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EIP712SignRequest):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class AuthMatrix(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'wheres': 'list[Address]',
        'whos': 'list[Address]',
        'values': 'list[list[int]]'
    }

    attribute_map = {
        'wheres': 'wheres',
        'whos': 'whos',
        'values': 'values'
    }

    def __init__(self, wheres=None, whos=None, values=None, local_vars_configuration=None):  # noqa: E501
        """AuthMatrix - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._wheres = None
        self._whos = None
        self._values = None
        self.discriminator = None

        self.wheres = wheres
        self.whos = whos
        self.values = values

    @property
    def wheres(self):
        """Gets the wheres of this AuthMatrix.  # noqa: E501


        :return: The wheres of this AuthMatrix.  # noqa: E501
        :rtype: list[Address]
        """
        return self._wheres

    @wheres.setter
    def wheres(self, wheres):
        """Sets the wheres of this AuthMatrix.


        :param wheres: The wheres of this AuthMatrix.  # noqa: E501
        :type: list[Address]
        """
        if self.local_vars_configuration.client_side_validation and wheres is None:  # noqa: E501
            raise ValueError("Invalid value for `wheres`, must not be `None`")  # noqa: E501

        self._wheres = wheres

    @property
    def whos(self):
        """Gets the whos of this AuthMatrix.  # noqa: E501


        :return: The whos of this AuthMatrix.  # noqa: E501
        :rtype: list[Address]
        """
        return self._whos

    @whos.setter
    def whos(self, whos):
        """Sets the whos of this AuthMatrix.


        :param whos: The whos of this AuthMatrix.  # noqa: E501
        :type: list[Address]
        """
        if self.local_vars_configuration.client_side_validation and whos is None:  # noqa: E501
            raise ValueError("Invalid value for `whos`, must not be `None`")  # noqa: E501

        self._whos = whos

    @property
    def values(self):
        """Gets the values of this AuthMatrix.  # noqa: E501


        :return: The values of this AuthMatrix.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AuthMatrix.


        :param values: The values of this AuthMatrix.  # noqa: E501
        :type: list[list[int]]
        """
        if self.local_vars_configuration.client_side_validation and values is None:  # noqa: E501
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(values).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `values` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(values) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthMatrix):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthMatrix):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class LendingpoolWithdrawEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'reserve': 'str',
        'user': 'str',
        'to': 'str',
        'amount': 'str',
        'raw': 'Log'
    }

    attribute_map = {
        'id': 'id',
        'reserve': 'reserve',
        'user': 'user',
        'to': 'to',
        'amount': 'amount',
        'raw': 'raw'
    }

    def __init__(self, id=None, reserve=None, user=None, to=None, amount=None, raw=None, local_vars_configuration=None):  # noqa: E501
        """LendingpoolWithdrawEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._reserve = None
        self._user = None
        self._to = None
        self._amount = None
        self._raw = None
        self.discriminator = None

        self.id = id
        self.reserve = reserve
        self.user = user
        self.to = to
        self.amount = amount
        self.raw = raw

    @property
    def id(self):
        """Gets the id of this LendingpoolWithdrawEvent.  # noqa: E501

        Identifier for the withdraw event.  # noqa: E501

        :return: The id of this LendingpoolWithdrawEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LendingpoolWithdrawEvent.

        Identifier for the withdraw event.  # noqa: E501

        :param id: The id of this LendingpoolWithdrawEvent.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def reserve(self):
        """Gets the reserve of this LendingpoolWithdrawEvent.  # noqa: E501

        Ethereum address of the reserve from which funds were withdrawn.  # noqa: E501

        :return: The reserve of this LendingpoolWithdrawEvent.  # noqa: E501
        :rtype: str
        """
        return self._reserve

    @reserve.setter
    def reserve(self, reserve):
        """Sets the reserve of this LendingpoolWithdrawEvent.

        Ethereum address of the reserve from which funds were withdrawn.  # noqa: E501

        :param reserve: The reserve of this LendingpoolWithdrawEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reserve is None:  # noqa: E501
            raise ValueError("Invalid value for `reserve`, must not be `None`")  # noqa: E501

        self._reserve = reserve

    @property
    def user(self):
        """Gets the user of this LendingpoolWithdrawEvent.  # noqa: E501

        Ethereum address of the user who initiated the withdrawal.  # noqa: E501

        :return: The user of this LendingpoolWithdrawEvent.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LendingpoolWithdrawEvent.

        Ethereum address of the user who initiated the withdrawal.  # noqa: E501

        :param user: The user of this LendingpoolWithdrawEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def to(self):
        """Gets the to of this LendingpoolWithdrawEvent.  # noqa: E501

        Ethereum address of the recipient.  # noqa: E501

        :return: The to of this LendingpoolWithdrawEvent.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this LendingpoolWithdrawEvent.

        Ethereum address of the recipient.  # noqa: E501

        :param to: The to of this LendingpoolWithdrawEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and to is None:  # noqa: E501
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def amount(self):
        """Gets the amount of this LendingpoolWithdrawEvent.  # noqa: E501

        The amount that was withdrawn.  # noqa: E501

        :return: The amount of this LendingpoolWithdrawEvent.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LendingpoolWithdrawEvent.

        The amount that was withdrawn.  # noqa: E501

        :param amount: The amount of this LendingpoolWithdrawEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def raw(self):
        """Gets the raw of this LendingpoolWithdrawEvent.  # noqa: E501


        :return: The raw of this LendingpoolWithdrawEvent.  # noqa: E501
        :rtype: Log
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this LendingpoolWithdrawEvent.


        :param raw: The raw of this LendingpoolWithdrawEvent.  # noqa: E501
        :type: Log
        """
        if self.local_vars_configuration.client_side_validation and raw is None:  # noqa: E501
            raise ValueError("Invalid value for `raw`, must not be `None`")  # noqa: E501

        self._raw = raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LendingpoolWithdrawEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LendingpoolWithdrawEvent):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class Ilk(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'symbol': 'Symbol',
        'minimum_collateralization_ratio': 'str',
        'maximum_loan_to_value': 'str',
        'liquidation_penalty': 'str',
        'debt_ceiling': 'dict(str, str)',
        'debt': 'dict(str, str)',
        'annual_stability_fee': 'str',
        'dust_limit': 'dict(str, str)',
        'price': 'dict(str, str)',
        'next_price': 'dict(str, str)',
        'join': 'str',
        'median': 'str',
        'gem': 'str',
        'clipper': 'str',
        'pip': 'str',
        'hole': 'dict(str, str)',
        'dirt': 'dict(str, str)',
        'available_to_borrow': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'symbol': 'symbol',
        'minimum_collateralization_ratio': 'minimumCollateralizationRatio',
        'maximum_loan_to_value': 'maximumLoanToValue',
        'liquidation_penalty': 'liquidationPenalty',
        'debt_ceiling': 'debtCeiling',
        'debt': 'debt',
        'annual_stability_fee': 'annualStabilityFee',
        'dust_limit': 'dustLimit',
        'price': 'price',
        'next_price': 'nextPrice',
        'join': 'join',
        'median': 'median',
        'gem': 'gem',
        'clipper': 'clipper',
        'pip': 'pip',
        'hole': 'hole',
        'dirt': 'dirt',
        'available_to_borrow': 'availableToBorrow'
    }

    def __init__(self, name=None, symbol=None, minimum_collateralization_ratio=None, maximum_loan_to_value=None, liquidation_penalty=None, debt_ceiling=None, debt=None, annual_stability_fee=None, dust_limit=None, price=None, next_price=None, join=None, median=None, gem=None, clipper=None, pip=None, hole=None, dirt=None, available_to_borrow=None, local_vars_configuration=None):  # noqa: E501
        """Ilk - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._symbol = None
        self._minimum_collateralization_ratio = None
        self._maximum_loan_to_value = None
        self._liquidation_penalty = None
        self._debt_ceiling = None
        self._debt = None
        self._annual_stability_fee = None
        self._dust_limit = None
        self._price = None
        self._next_price = None
        self._join = None
        self._median = None
        self._gem = None
        self._clipper = None
        self._pip = None
        self._hole = None
        self._dirt = None
        self._available_to_borrow = None
        self.discriminator = None

        self.name = name
        self.symbol = symbol
        self.minimum_collateralization_ratio = minimum_collateralization_ratio
        self.maximum_loan_to_value = maximum_loan_to_value
        self.liquidation_penalty = liquidation_penalty
        self.debt_ceiling = debt_ceiling
        self.debt = debt
        self.annual_stability_fee = annual_stability_fee
        self.dust_limit = dust_limit
        self.price = price
        self.next_price = next_price
        self.join = join
        self.median = median
        self.gem = gem
        self.clipper = clipper
        self.pip = pip
        self.hole = hole
        self.dirt = dirt
        self.available_to_borrow = available_to_borrow

    @property
    def name(self):
        """Gets the name of this Ilk.  # noqa: E501

        Name of the ILK  # noqa: E501

        :return: The name of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ilk.

        Name of the ILK  # noqa: E501

        :param name: The name of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Ilk.  # noqa: E501


        :return: The symbol of this Ilk.  # noqa: E501
        :rtype: Symbol
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Ilk.


        :param symbol: The symbol of this Ilk.  # noqa: E501
        :type: Symbol
        """
        if self.local_vars_configuration.client_side_validation and symbol is None:  # noqa: E501
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def minimum_collateralization_ratio(self):
        """Gets the minimum_collateralization_ratio of this Ilk.  # noqa: E501

        Minimum Collateralization Ratio  # noqa: E501

        :return: The minimum_collateralization_ratio of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._minimum_collateralization_ratio

    @minimum_collateralization_ratio.setter
    def minimum_collateralization_ratio(self, minimum_collateralization_ratio):
        """Sets the minimum_collateralization_ratio of this Ilk.

        Minimum Collateralization Ratio  # noqa: E501

        :param minimum_collateralization_ratio: The minimum_collateralization_ratio of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and minimum_collateralization_ratio is None:  # noqa: E501
            raise ValueError("Invalid value for `minimum_collateralization_ratio`, must not be `None`")  # noqa: E501

        self._minimum_collateralization_ratio = minimum_collateralization_ratio

    @property
    def maximum_loan_to_value(self):
        """Gets the maximum_loan_to_value of this Ilk.  # noqa: E501

        Maximum Loan To Value  # noqa: E501

        :return: The maximum_loan_to_value of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._maximum_loan_to_value

    @maximum_loan_to_value.setter
    def maximum_loan_to_value(self, maximum_loan_to_value):
        """Sets the maximum_loan_to_value of this Ilk.

        Maximum Loan To Value  # noqa: E501

        :param maximum_loan_to_value: The maximum_loan_to_value of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and maximum_loan_to_value is None:  # noqa: E501
            raise ValueError("Invalid value for `maximum_loan_to_value`, must not be `None`")  # noqa: E501

        self._maximum_loan_to_value = maximum_loan_to_value

    @property
    def liquidation_penalty(self):
        """Gets the liquidation_penalty of this Ilk.  # noqa: E501

        Liquidation Penalty  # noqa: E501

        :return: The liquidation_penalty of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._liquidation_penalty

    @liquidation_penalty.setter
    def liquidation_penalty(self, liquidation_penalty):
        """Sets the liquidation_penalty of this Ilk.

        Liquidation Penalty  # noqa: E501

        :param liquidation_penalty: The liquidation_penalty of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and liquidation_penalty is None:  # noqa: E501
            raise ValueError("Invalid value for `liquidation_penalty`, must not be `None`")  # noqa: E501

        self._liquidation_penalty = liquidation_penalty

    @property
    def debt_ceiling(self):
        """Gets the debt_ceiling of this Ilk.  # noqa: E501


        :return: The debt_ceiling of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._debt_ceiling

    @debt_ceiling.setter
    def debt_ceiling(self, debt_ceiling):
        """Sets the debt_ceiling of this Ilk.


        :param debt_ceiling: The debt_ceiling of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and debt_ceiling is None:  # noqa: E501
            raise ValueError("Invalid value for `debt_ceiling`, must not be `None`")  # noqa: E501

        self._debt_ceiling = debt_ceiling

    @property
    def debt(self):
        """Gets the debt of this Ilk.  # noqa: E501


        :return: The debt of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._debt

    @debt.setter
    def debt(self, debt):
        """Sets the debt of this Ilk.


        :param debt: The debt of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and debt is None:  # noqa: E501
            raise ValueError("Invalid value for `debt`, must not be `None`")  # noqa: E501

        self._debt = debt

    @property
    def annual_stability_fee(self):
        """Gets the annual_stability_fee of this Ilk.  # noqa: E501

        Annual Stability Fee  # noqa: E501

        :return: The annual_stability_fee of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._annual_stability_fee

    @annual_stability_fee.setter
    def annual_stability_fee(self, annual_stability_fee):
        """Sets the annual_stability_fee of this Ilk.

        Annual Stability Fee  # noqa: E501

        :param annual_stability_fee: The annual_stability_fee of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and annual_stability_fee is None:  # noqa: E501
            raise ValueError("Invalid value for `annual_stability_fee`, must not be `None`")  # noqa: E501

        self._annual_stability_fee = annual_stability_fee

    @property
    def dust_limit(self):
        """Gets the dust_limit of this Ilk.  # noqa: E501


        :return: The dust_limit of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dust_limit

    @dust_limit.setter
    def dust_limit(self, dust_limit):
        """Sets the dust_limit of this Ilk.


        :param dust_limit: The dust_limit of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and dust_limit is None:  # noqa: E501
            raise ValueError("Invalid value for `dust_limit`, must not be `None`")  # noqa: E501

        self._dust_limit = dust_limit

    @property
    def price(self):
        """Gets the price of this Ilk.  # noqa: E501


        :return: The price of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Ilk.


        :param price: The price of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def next_price(self):
        """Gets the next_price of this Ilk.  # noqa: E501


        :return: The next_price of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._next_price

    @next_price.setter
    def next_price(self, next_price):
        """Sets the next_price of this Ilk.


        :param next_price: The next_price of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and next_price is None:  # noqa: E501
            raise ValueError("Invalid value for `next_price`, must not be `None`")  # noqa: E501

        self._next_price = next_price

    @property
    def join(self):
        """Gets the join of this Ilk.  # noqa: E501

        Join Address  # noqa: E501

        :return: The join of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._join

    @join.setter
    def join(self, join):
        """Sets the join of this Ilk.

        Join Address  # noqa: E501

        :param join: The join of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and join is None:  # noqa: E501
            raise ValueError("Invalid value for `join`, must not be `None`")  # noqa: E501

        self._join = join

    @property
    def median(self):
        """Gets the median of this Ilk.  # noqa: E501

        Median Address  # noqa: E501

        :return: The median of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this Ilk.

        Median Address  # noqa: E501

        :param median: The median of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and median is None:  # noqa: E501
            raise ValueError("Invalid value for `median`, must not be `None`")  # noqa: E501

        self._median = median

    @property
    def gem(self):
        """Gets the gem of this Ilk.  # noqa: E501

        Gem Address  # noqa: E501

        :return: The gem of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._gem

    @gem.setter
    def gem(self, gem):
        """Sets the gem of this Ilk.

        Gem Address  # noqa: E501

        :param gem: The gem of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gem is None:  # noqa: E501
            raise ValueError("Invalid value for `gem`, must not be `None`")  # noqa: E501

        self._gem = gem

    @property
    def clipper(self):
        """Gets the clipper of this Ilk.  # noqa: E501

        Clipper Address  # noqa: E501

        :return: The clipper of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._clipper

    @clipper.setter
    def clipper(self, clipper):
        """Sets the clipper of this Ilk.

        Clipper Address  # noqa: E501

        :param clipper: The clipper of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and clipper is None:  # noqa: E501
            raise ValueError("Invalid value for `clipper`, must not be `None`")  # noqa: E501

        self._clipper = clipper

    @property
    def pip(self):
        """Gets the pip of this Ilk.  # noqa: E501

        Pip Address  # noqa: E501

        :return: The pip of this Ilk.  # noqa: E501
        :rtype: str
        """
        return self._pip

    @pip.setter
    def pip(self, pip):
        """Sets the pip of this Ilk.

        Pip Address  # noqa: E501

        :param pip: The pip of this Ilk.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and pip is None:  # noqa: E501
            raise ValueError("Invalid value for `pip`, must not be `None`")  # noqa: E501

        self._pip = pip

    @property
    def hole(self):
        """Gets the hole of this Ilk.  # noqa: E501


        :return: The hole of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._hole

    @hole.setter
    def hole(self, hole):
        """Sets the hole of this Ilk.


        :param hole: The hole of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and hole is None:  # noqa: E501
            raise ValueError("Invalid value for `hole`, must not be `None`")  # noqa: E501

        self._hole = hole

    @property
    def dirt(self):
        """Gets the dirt of this Ilk.  # noqa: E501


        :return: The dirt of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dirt

    @dirt.setter
    def dirt(self, dirt):
        """Sets the dirt of this Ilk.


        :param dirt: The dirt of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and dirt is None:  # noqa: E501
            raise ValueError("Invalid value for `dirt`, must not be `None`")  # noqa: E501

        self._dirt = dirt

    @property
    def available_to_borrow(self):
        """Gets the available_to_borrow of this Ilk.  # noqa: E501


        :return: The available_to_borrow of this Ilk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._available_to_borrow

    @available_to_borrow.setter
    def available_to_borrow(self, available_to_borrow):
        """Sets the available_to_borrow of this Ilk.


        :param available_to_borrow: The available_to_borrow of this Ilk.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and available_to_borrow is None:  # noqa: E501
            raise ValueError("Invalid value for `available_to_borrow`, must not be `None`")  # noqa: E501

        self._available_to_borrow = available_to_borrow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ilk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ilk):
            return True

        return self.to_dict() != other.to_dict()

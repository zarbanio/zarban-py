# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class TypedDataDomain(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'version': 'str',
        'chain_id': 'str',
        'verifying_contract': 'str',
        'salt': 'str'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'chain_id': 'chainId',
        'verifying_contract': 'verifyingContract',
        'salt': 'salt'
    }

    def __init__(self, name=None, version=None, chain_id=None, verifying_contract=None, salt=None, local_vars_configuration=None):  # noqa: E501
        """TypedDataDomain - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._version = None
        self._chain_id = None
        self._verifying_contract = None
        self._salt = None
        self.discriminator = None

        self.name = name
        if version is not None:
            self.version = version
        self.chain_id = chain_id
        self.verifying_contract = verifying_contract
        if salt is not None:
            self.salt = salt

    @property
    def name(self):
        """Gets the name of this TypedDataDomain.  # noqa: E501


        :return: The name of this TypedDataDomain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TypedDataDomain.


        :param name: The name of this TypedDataDomain.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this TypedDataDomain.  # noqa: E501


        :return: The version of this TypedDataDomain.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TypedDataDomain.


        :param version: The version of this TypedDataDomain.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def chain_id(self):
        """Gets the chain_id of this TypedDataDomain.  # noqa: E501


        :return: The chain_id of this TypedDataDomain.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this TypedDataDomain.


        :param chain_id: The chain_id of this TypedDataDomain.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and chain_id is None:  # noqa: E501
            raise ValueError("Invalid value for `chain_id`, must not be `None`")  # noqa: E501

        self._chain_id = chain_id

    @property
    def verifying_contract(self):
        """Gets the verifying_contract of this TypedDataDomain.  # noqa: E501


        :return: The verifying_contract of this TypedDataDomain.  # noqa: E501
        :rtype: str
        """
        return self._verifying_contract

    @verifying_contract.setter
    def verifying_contract(self, verifying_contract):
        """Sets the verifying_contract of this TypedDataDomain.


        :param verifying_contract: The verifying_contract of this TypedDataDomain.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and verifying_contract is None:  # noqa: E501
            raise ValueError("Invalid value for `verifying_contract`, must not be `None`")  # noqa: E501

        self._verifying_contract = verifying_contract

    @property
    def salt(self):
        """Gets the salt of this TypedDataDomain.  # noqa: E501


        :return: The salt of this TypedDataDomain.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this TypedDataDomain.


        :param salt: The salt of this TypedDataDomain.  # noqa: E501
        :type: str
        """

        self._salt = salt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypedDataDomain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypedDataDomain):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class ChainActivity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'step_number': 'int',
        'number_of_steps': 'int',
        'steps': 'list[ChainActivityStep]'
    }

    attribute_map = {
        'step_number': 'stepNumber',
        'number_of_steps': 'numberOfSteps',
        'steps': 'steps'
    }

    def __init__(self, step_number=None, number_of_steps=None, steps=None, local_vars_configuration=None):  # noqa: E501
        """ChainActivity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._step_number = None
        self._number_of_steps = None
        self._steps = None
        self.discriminator = None

        self.step_number = step_number
        self.number_of_steps = number_of_steps
        self.steps = steps

    @property
    def step_number(self):
        """Gets the step_number of this ChainActivity.  # noqa: E501


        :return: The step_number of this ChainActivity.  # noqa: E501
        :rtype: int
        """
        return self._step_number

    @step_number.setter
    def step_number(self, step_number):
        """Sets the step_number of this ChainActivity.


        :param step_number: The step_number of this ChainActivity.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and step_number is None:  # noqa: E501
            raise ValueError("Invalid value for `step_number`, must not be `None`")  # noqa: E501

        self._step_number = step_number

    @property
    def number_of_steps(self):
        """Gets the number_of_steps of this ChainActivity.  # noqa: E501


        :return: The number_of_steps of this ChainActivity.  # noqa: E501
        :rtype: int
        """
        return self._number_of_steps

    @number_of_steps.setter
    def number_of_steps(self, number_of_steps):
        """Sets the number_of_steps of this ChainActivity.


        :param number_of_steps: The number_of_steps of this ChainActivity.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and number_of_steps is None:  # noqa: E501
            raise ValueError("Invalid value for `number_of_steps`, must not be `None`")  # noqa: E501

        self._number_of_steps = number_of_steps

    @property
    def steps(self):
        """Gets the steps of this ChainActivity.  # noqa: E501


        :return: The steps of this ChainActivity.  # noqa: E501
        :rtype: list[ChainActivityStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ChainActivity.


        :param steps: The steps of this ChainActivity.  # noqa: E501
        :type: list[ChainActivityStep]
        """
        if self.local_vars_configuration.client_side_validation and steps is None:  # noqa: E501
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChainActivity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChainActivity):
            return True

        return self.to_dict() != other.to_dict()

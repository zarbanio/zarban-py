# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class LendingpoolStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_available': 'dict(str, str)',
        'total_borrows': 'dict(str, str)',
        'total_market_size': 'dict(str, str)'
    }

    attribute_map = {
        'total_available': 'totalAvailable',
        'total_borrows': 'totalBorrows',
        'total_market_size': 'totalMarketSize'
    }

    def __init__(self, total_available=None, total_borrows=None, total_market_size=None, local_vars_configuration=None):  # noqa: E501
        """LendingpoolStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_available = None
        self._total_borrows = None
        self._total_market_size = None
        self.discriminator = None

        self.total_available = total_available
        self.total_borrows = total_borrows
        self.total_market_size = total_market_size

    @property
    def total_available(self):
        """Gets the total_available of this LendingpoolStats.  # noqa: E501


        :return: The total_available of this LendingpoolStats.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._total_available

    @total_available.setter
    def total_available(self, total_available):
        """Sets the total_available of this LendingpoolStats.


        :param total_available: The total_available of this LendingpoolStats.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and total_available is None:  # noqa: E501
            raise ValueError("Invalid value for `total_available`, must not be `None`")  # noqa: E501

        self._total_available = total_available

    @property
    def total_borrows(self):
        """Gets the total_borrows of this LendingpoolStats.  # noqa: E501


        :return: The total_borrows of this LendingpoolStats.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._total_borrows

    @total_borrows.setter
    def total_borrows(self, total_borrows):
        """Sets the total_borrows of this LendingpoolStats.


        :param total_borrows: The total_borrows of this LendingpoolStats.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and total_borrows is None:  # noqa: E501
            raise ValueError("Invalid value for `total_borrows`, must not be `None`")  # noqa: E501

        self._total_borrows = total_borrows

    @property
    def total_market_size(self):
        """Gets the total_market_size of this LendingpoolStats.  # noqa: E501


        :return: The total_market_size of this LendingpoolStats.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._total_market_size

    @total_market_size.setter
    def total_market_size(self, total_market_size):
        """Sets the total_market_size of this LendingpoolStats.


        :param total_market_size: The total_market_size of this LendingpoolStats.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and total_market_size is None:  # noqa: E501
            raise ValueError("Invalid value for `total_market_size`, must not be `None`")  # noqa: E501

        self._total_market_size = total_market_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LendingpoolStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LendingpoolStats):
            return True

        return self.to_dict() != other.to_dict()

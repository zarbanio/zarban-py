# coding: utf-8

"""
    Zarban API

    API for Zarban services.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from zarban.service.openapi_client.configuration import Configuration


class TypedData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'types': 'dict(str, list[Type])',
        'primary_type': 'str',
        'domain': 'TypedDataDomain',
        'message': 'dict(str, object)'
    }

    attribute_map = {
        'types': 'types',
        'primary_type': 'primaryType',
        'domain': 'domain',
        'message': 'message'
    }

    def __init__(self, types=None, primary_type=None, domain=None, message=None, local_vars_configuration=None):  # noqa: E501
        """TypedData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._types = None
        self._primary_type = None
        self._domain = None
        self._message = None
        self.discriminator = None

        self.types = types
        self.primary_type = primary_type
        self.domain = domain
        self.message = message

    @property
    def types(self):
        """Gets the types of this TypedData.  # noqa: E501

        A map where each key is a string and each value is a list of Type  # noqa: E501

        :return: The types of this TypedData.  # noqa: E501
        :rtype: dict(str, list[Type])
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this TypedData.

        A map where each key is a string and each value is a list of Type  # noqa: E501

        :param types: The types of this TypedData.  # noqa: E501
        :type: dict(str, list[Type])
        """
        if self.local_vars_configuration.client_side_validation and types is None:  # noqa: E501
            raise ValueError("Invalid value for `types`, must not be `None`")  # noqa: E501

        self._types = types

    @property
    def primary_type(self):
        """Gets the primary_type of this TypedData.  # noqa: E501


        :return: The primary_type of this TypedData.  # noqa: E501
        :rtype: str
        """
        return self._primary_type

    @primary_type.setter
    def primary_type(self, primary_type):
        """Sets the primary_type of this TypedData.


        :param primary_type: The primary_type of this TypedData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and primary_type is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_type`, must not be `None`")  # noqa: E501

        self._primary_type = primary_type

    @property
    def domain(self):
        """Gets the domain of this TypedData.  # noqa: E501


        :return: The domain of this TypedData.  # noqa: E501
        :rtype: TypedDataDomain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this TypedData.


        :param domain: The domain of this TypedData.  # noqa: E501
        :type: TypedDataDomain
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def message(self):
        """Gets the message of this TypedData.  # noqa: E501


        :return: The message of this TypedData.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TypedData.


        :param message: The message of this TypedData.  # noqa: E501
        :type: dict(str, object)
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypedData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypedData):
            return True

        return self.to_dict() != other.to_dict()
